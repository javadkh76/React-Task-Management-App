import { createSlice } from '@reduxjs/toolkit'
import { RootState } from '../../app/store'
import { TaskState, Task } from '../../misc/types'
import { createTask, deleteTask, getTasks, updateTask } from './taskThunk'

const initialState: TaskState = {
  data: [],
  status: 'idle',
}

export const taskSlice = createSlice({
  name: 'tasks',
  initialState,
  reducers: {},
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // Get task reducer
      .addCase(getTasks.pending, (state) => {
        state.status = 'loading'
        state.action = 'getTasks'
      })
      .addCase(getTasks.fulfilled, (state, action) => {
        // This part is written to handle mock api id problems (like task without id exists on server)
        const filteredTasks: Task[] = action.payload.filter(
          (task: Partial<Task>) => task.id && Number.isInteger(task.id)
        )
        state.status = 'idle'
        state.data = filteredTasks
        state.msg = 'success'
      })
      .addCase(getTasks.rejected, (state, action) => {
        state.status = 'failed'
        state.msg = action.error.message
      })
      // Create task reducer
      .addCase(createTask.pending, (state) => {
        state.status = 'loading'
        state.action = 'createTask'
      })
      .addCase(createTask.fulfilled, (state, action) => {
        state.status = 'idle'
        state.data = [...state.data, action.payload]
        state.msg = 'success'
      })
      .addCase(createTask.rejected, (state, action) => {
        state.status = 'failed'
        state.msg = action.error.message
      })
      // Update task reducer
      .addCase(updateTask.pending, (state) => {
        state.status = 'loading'
        state.action = 'updateTask'
      })
      .addCase(updateTask.fulfilled, (state, action) => {
        const updatedTasks = state.data.map((task) => {
          if (task.id === action.payload.id) return action.payload
          return task
        })
        state.status = 'idle'
        state.data = updatedTasks
        state.msg = 'success'
      })
      .addCase(updateTask.rejected, (state, action) => {
        state.status = 'failed'
        state.msg = action.error.message
      })
      // Delete task reducer
      .addCase(deleteTask.pending, (state) => {
        state.status = 'loading'
        state.action = 'deleteTask'
      })
      .addCase(deleteTask.fulfilled, (state, action) => {
        state.status = 'idle'
        state.data = state.data.filter(
          (task: Task) => task.id !== action.meta.arg
        )
        state.msg = 'success'
      })
      .addCase(deleteTask.rejected, (state, action) => {
        state.status = 'failed'
        state.msg = action.error.message
      })
  },
})

export const selectTask = (state: RootState) => state.task
export default taskSlice.reducer
